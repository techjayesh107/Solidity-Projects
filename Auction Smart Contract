// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

contract Auction {
    address public owner;
    uint256 public auctionEndTime;
    address public highestBidder;
    uint256 public highestBid;

    mapping(address => uint256) public bids;

    event BidPlaced(address bidder, uint256 bidAmount);
    event AuctionEnded(address winner, uint256 winningBid);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier onlyBeforeEnd() {
        require(block.timestamp < auctionEndTime, "Auction has already ended");
        _;
    }

    modifier onlyAfterEnd() {
        require(block.timestamp >= auctionEndTime, "Auction has not ended yet");
        _;
    }

    constructor(uint256 _durationMinutes) {
        owner = msg.sender;
        auctionEndTime = block.timestamp + _durationMinutes * 1 minutes;
    }

    function placeBid() external payable onlyBeforeEnd {
        require(msg.value > highestBid, "Bid must be higher than the current highest bid");

        if (highestBidder != address(0)) {
            // Refund the previous highest bidder
            payable(highestBidder).transfer(highestBid);
        }

        highestBidder = msg.sender;
        highestBid = msg.value;
        bids[msg.sender] += msg.value;

        emit BidPlaced(msg.sender, msg.value);
    }

    function endAuction() external onlyOwner onlyAfterEnd {
        require(highestBidder != address(0), "No bids placed");

        payable(owner).transfer(highestBid);

        emit AuctionEnded(highestBidder, highestBid);

        // Reset the contract for the next auction
        highestBidder = address(0);
        highestBid = 0;
    }
}
